import { Request, Response, NextFunction } from 'express';
import Operation, { IOperation } from '../models/Operation';
import Budget from '../models/Budget';
import Goal from '../models/Goal';
import { addCurrencyConversion, addCurrencyConversionToArray } from '../utils/responseFormatter';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
async function updateBudgetSpent(userId: string, category: string, amount: number, operation: 'add' | 'subtract') {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–æ " > ")
    // –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è > –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã" ‚Üí "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
    const mainCategory = category.includes(' > ') ? category.split(' > ')[0] : category;
    
    console.log(`üîç Looking for budget: "${mainCategory}" (original: "${category}")`);
    
    // –ù–∞—Ö–æ–¥–∏–º –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const budgets = await Budget.find({ user: userId });
    const budget = budgets.find(b => b.category === mainCategory);
    
    if (!budget || !budget.id) {
      console.log(`‚ö†Ô∏è Budget not found for category: ${mainCategory}`);
      console.log(`üìã Available budgets:`, budgets.map(b => b.category));
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É spent
    const delta = operation === 'add' ? amount : -amount;
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üìä Budget calculation details:`);
    console.log(`  - Current spent: ${budget.spent} (type: ${typeof budget.spent})`);
    console.log(`  - Amount: ${amount} (type: ${typeof amount})`);
    console.log(`  - Operation: ${operation}`);
    console.log(`  - Delta: ${delta}`);
    console.log(`  - budget.spent + delta: ${budget.spent + delta}`);
    
    const newSpent = Math.max(0, Number(budget.spent) + delta); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    
    console.log(`üí∞ Updating budget spent: ${budget.category} (${budget.spent} ‚Üí ${newSpent})`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç
    await Budget.findByIdAndUpdate(budget.id, { spent: newSpent });
    console.log(`‚úÖ Budget updated successfully!`);
  } catch (error: any) {
    console.error('‚ùå Error updating budget:', error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞
async function autoFillGoals(userId: string, incomeAmount: number) {
  try {
    console.log(`üéØ Checking auto-fill goals for user: ${userId}, income: ${incomeAmount}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ü–µ–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    const goals = await Goal.find({ user: userId });
    const autoFillGoals = goals.filter(g => g.autoFill && g.autoFillPercentage && g.autoFillPercentage > 0);
    
    if (autoFillGoals.length === 0) {
      console.log(`‚ö†Ô∏è No auto-fill goals found`);
      return;
    }
    
    console.log(`üìã Found ${autoFillGoals.length} auto-fill goals`);
    
    // –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
    for (const goal of autoFillGoals) {
      if (!goal.id) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ª–∏ –±–µ–∑ ID
      
      const percentage = Number(goal.autoFillPercentage || 0);
      const fillAmount = (incomeAmount * percentage) / 100;
      const newCurrent = Number(goal.current) + fillAmount;
      
      // –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
      const finalAmount = Math.min(newCurrent, Number(goal.target));
      
      console.log(`üí∞ Auto-filling goal "${goal.title}":`);
      console.log(`  - Income: ${incomeAmount}, Percentage: ${percentage}%`);
      console.log(`  - Fill amount: ${fillAmount}`);
      console.log(`  - Current: ${goal.current} ‚Üí ${finalAmount}`);
      
      await Goal.findByIdAndUpdate(goal.id, { current: finalAmount });
      console.log(`‚úÖ Goal auto-filled successfully!`);
    }
  } catch (error: any) {
    console.error('‚ùå Error auto-filling goals:', error.message);
  }
}

export const getOperations = async (req: Request, res: Response, _next: NextFunction) => {
  try {
    const { startDate, endDate, timezoneOffset } = req.query;
    
    console.log('üìÖ Backend received dates:', { startDate, endDate, timezoneOffset, userId: req.user?.id });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const debugOps = await Operation.find({ user: req.user?.id || '' });
    console.log('üìã Sample operations dates:', debugOps.slice(0, 3).map((op: IOperation) => ({ date: op.date, id: op.id })));
    
    // –°—Ç—Ä–æ–∏–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const query: any = { user: req.user?.id || '' };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (startDate || endDate) {
      query.date = {};
      
      // timezoneOffset –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, -180 –¥–ª—è UTC+3)
      // –ù—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å UTC –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è
      const offsetMinutes = timezoneOffset ? parseInt(String(timezoneOffset)) : 0;
      
      if (startDate) {
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∫–∞–∫ UTC –ø–æ–ª–Ω–æ—á—å, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º offset
        const start = new Date(startDate + 'T00:00:00.000Z');
        // –î–æ–±–∞–≤–ª—è–µ–º offset (–¥–ª—è UTC+3 offset = -180, –¥–æ–±–∞–≤–ª—è–µ–º -180, —Ç.–µ. –≤—ã—á–∏—Ç–∞–µ–º 3 —á–∞—Å–∞)
        // –≠—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç '28.10 00:00 UTC' ‚Üí '27.10 21:00 UTC' (–Ω–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è –≤ UTC)
        start.setMinutes(start.getMinutes() + offsetMinutes);
        query.date.$gte = start;
        console.log('üìÖ Start date (UTC adjusted for local TZ):', start);
      }
      
      if (endDate) {
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∫–∞–∫ UTC –∫–æ–Ω–µ—Ü –¥–Ω—è, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º offset
        const end = new Date(endDate + 'T23:59:59.999Z');
        end.setMinutes(end.getMinutes() + offsetMinutes);
        query.date.$lte = end;
        console.log('üìÖ End date (UTC adjusted for local TZ):', end);
      }
    }
    
    console.log('üìã MySQL query filter:', JSON.stringify(query, null, 2));
    const ops = await Operation.find(query);
    console.log('üìã Found operations:', ops.length);
    const opsWithConversion = await addCurrencyConversionToArray(ops, req);
    res.status(200).json({ success: true, count: ops.length, data: opsWithConversion });
  } catch (err: any) {
    console.error('‚ùå Error fetching operations:', err);
    res.status(500).json({ success: false, message: err.message });
  }
};

export const getOperation = async (req: Request, res: Response, _next: NextFunction) => {
  try {
    const op = await Operation.findById(req.params.id);
    if (!op || op.user !== req.user?.id) {
      res.status(404).json({ success: false, message: 'Operation not found' });
      return;
    }
    const opWithConversion = await addCurrencyConversion(op, req);
    res.status(200).json({ success: true, data: opWithConversion });
  } catch (err: any) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const createOperation = async (req: Request, res: Response, _next: NextFunction) => {
  try {
    const opData: IOperation = {
      title: req.body.title,
      titleKey: req.body.titleKey,
      amount: req.body.amount,
      category: req.body.category,
      categoryKey: req.body.categoryKey,
      date: req.body.date || new Date(),
      timestamp: req.body.timestamp,
      type: req.body.type,
      fromAccount: req.body.fromAccount,
      toAccount: req.body.toAccount,
      currency: req.body.currency || 'RUB',  // –í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
      user: req.user?.id || ''
    };
    const op = await Operation.create(opData);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
    if (op.type === 'expense' && op.category && op.user) {
      await updateBudgetSpent(op.user, op.category, Math.abs(op.amount), 'add');
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ–º —Ü–µ–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞
    if (op.type === 'income' && op.user) {
      await autoFillGoals(op.user, Math.abs(op.amount));
    }
    
    const opWithConversion = await addCurrencyConversion(op, req);
    res.status(201).json({ success: true, data: opWithConversion });
  } catch (err: any) {
    res.status(400).json({ success: false, message: err.message });
  }
};

export const updateOperation = async (req: Request, res: Response, _next: NextFunction) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const existingOp = await Operation.findById(req.params.id);
    if (!existingOp) {
      res.status(404).json({ success: false, message: 'Operation not found' });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (existingOp.user !== req.user?.id) {
      res.status(403).json({ success: false, message: 'Forbidden' });
      return;
    }
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç—ã
    const oldCategory = existingOp.category;
    const oldAmount = Math.abs(existingOp.amount);
    const oldType = existingOp.type;
    
    const newCategory = req.body.category || oldCategory;
    const newAmount = req.body.amount !== undefined ? Math.abs(req.body.amount) : oldAmount;
    const newType = req.body.type || oldType;
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –±—é–¥–∂–µ—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∞ —Ä–∞—Å—Ö–æ–¥–æ–º)
    if (oldType === 'expense' && oldCategory && existingOp.user) {
      await updateBudgetSpent(existingOp.user, oldCategory, oldAmount, 'subtract');
    }
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π (–µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ—Ö–æ–¥–æ–º)
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è,
    // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
    if (oldType === 'income' && existingOp.user && newType !== 'income') {
      console.log(`‚ö†Ô∏è Operation type changed from income to ${newType}, goals were auto-filled and cannot be automatically reverted`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    const op = await Operation.findByIdAndUpdate(req.params.id, req.body);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—é–¥–∂–µ—Ç (–µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥)
    if (newType === 'expense' && newCategory && existingOp.user) {
      await updateBudgetSpent(existingOp.user, newCategory, newAmount, 'add');
    }
    
    // –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω—è–µ–º —Ü–µ–ª–∏ (–µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Ö–æ–¥ –∏ –±—ã–ª –Ω–µ –¥–æ—Ö–æ–¥–æ–º)
    if (newType === 'income' && oldType !== 'income' && existingOp.user) {
      await autoFillGoals(existingOp.user, newAmount);
    }
    
    const opWithConversion = await addCurrencyConversion(op || existingOp, req);
    res.status(200).json({ success: true, data: opWithConversion });
  } catch (err: any) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const deleteOperation = async (req: Request, res: Response, _next: NextFunction) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const existingOp = await Operation.findById(req.params.id);
    if (!existingOp) {
      res.status(404).json({ success: false, message: 'Operation not found' });
      return;
    }
    
    if (existingOp.user !== req.user?.id) {
      res.status(403).json({ success: false, message: 'Forbidden' });
      return;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
    if (existingOp.type === 'expense' && existingOp.category && existingOp.user) {
      await updateBudgetSpent(existingOp.user, existingOp.category, Math.abs(existingOp.amount), 'subtract');
    }
    
    await Operation.findByIdAndDelete(req.params.id);
    res.status(200).json({ success: true, data: {} });
  } catch (err: any) {
    res.status(500).json({ success: false, message: err.message });
  }
};

export const getBalance = async (req: Request, res: Response) => {
  try {
    const ops = await Operation.find({ user: req.user?.id || '' });
    const balance = ops.reduce((sum, op) => sum + Number(op.amount), 0);
    const balanceWithConversion = await addCurrencyConversion({ amount: balance } as IOperation, req);
    
    res.status(200).json({ 
      success: true, 
      data: { 
        balance, 
        convertedBalance: balanceWithConversion.convertedAmount,
        convertedCurrency: balanceWithConversion.convertedCurrency,
        convertedCurrencyCode: balanceWithConversion.convertedCurrencyCode,
        totalOperations: ops.length 
      } 
    });
  } catch (err: any) {
    res.status(500).json({ success: false, message: err.message });
  }
};
